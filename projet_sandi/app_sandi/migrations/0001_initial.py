# Generated by Django 4.1.1 on 2022-10-01 00:30

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_doctor', models.BooleanField(default=False)),
                ('is_infirmier', models.BooleanField(default=False)),
                ('is_technicien', models.BooleanField(default=False)),
                ('telephone', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='Veuillez entrer un numéro de télèphone valide', regex='[0-9]{9}')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=255)),
                ('quartier', models.CharField(max_length=255)),
                ('ville', models.CharField(max_length=255)),
                ('telcli', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='Veuillez entrer un numéro de télèphone valide', regex='[0-9]{9}')])),
                ('telpro', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='Veuillez entrer un numéro de télèphone valide', regex='[0-9]{9}')])),
                ('lat', models.CharField(blank=True, max_length=50)),
                ('long', models.CharField(blank=True, max_length=50)),
                ('bp', models.CharField(blank=True, max_length=10)),
                ('etat', models.BooleanField(default=False)),
                ('date_mise_a_jour', models.DateField(auto_now=True, verbose_name='date mise à jour')),
                ('date_creation', models.DateField(auto_now_add=True, verbose_name='date de création')),
            ],
        ),
        migrations.CreateModel(
            name='Laboratoire',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=255)),
                ('quartier', models.CharField(max_length=255)),
                ('ville', models.CharField(max_length=255)),
                ('tellab', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='Veuillez entrer un numéro de télèphone valide', regex='[0-9]{9}')])),
                ('telpro', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='Veuillez entrer un numéro de télèphone valide', regex='[0-9]{9}')])),
                ('lat', models.CharField(blank=True, max_length=50)),
                ('long', models.CharField(blank=True, max_length=50)),
                ('bp', models.CharField(blank=True, max_length=10)),
                ('etat', models.BooleanField(default=False)),
                ('date_mise_a_jour', models.DateField(auto_now=True, verbose_name='date mise à jour')),
                ('date_creation', models.DateField(auto_now_add=True, verbose_name='date de création')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=255)),
                ('prenom', models.CharField(max_length=255)),
                ('telephone', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='Veuillez entrer un numéro de télèphone valide', regex='[0-9]{9}')])),
                ('code', models.CharField(max_length=5, unique=True)),
                ('sexe', models.CharField(blank=True, max_length=1)),
                ('age', models.CharField(blank=True, max_length=3)),
                ('quartier', models.CharField(blank=True, max_length=255)),
                ('date_mise_a_jour', models.DateField(auto_now=True, verbose_name='date mise à jour')),
                ('date_creation', models.DateField(auto_now_add=True, verbose_name='date de création')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Enregistreur patient')),
            ],
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Code prescription')),
                ('examen', models.CharField(max_length=255, verbose_name='Examens')),
                ('note', models.TextField(blank=True, max_length=255, null=True, verbose_name='Note')),
                ('status', models.BooleanField(default=0)),
                ('info', models.BooleanField(default=0)),
                ('date_mise_a_jour', models.DateField(auto_now=True, verbose_name='Date mise à jour')),
                ('date_creation', models.DateField(auto_now_add=True, verbose_name='Date de création')),
                ('date_prelevement', models.DateField(blank=True, null=True, verbose_name='Date de prélèvement')),
                ('clinic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app_sandi.clinic', verbose_name='Clinic actuelle')),
                ('laboratoire', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app_sandi.laboratoire')),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app_sandi.patient')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Prescripteur')),
            ],
        ),
        migrations.CreateModel(
            name='Resultat',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Code resultat')),
                ('examen', models.CharField(max_length=255, verbose_name='Examens')),
                ('categorie', models.CharField(max_length=255, verbose_name='Catégorie')),
                ('resultat_examen', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('valeur_reference', models.CharField(blank=True, max_length=255, null=True, verbose_name='valeur de reférence')),
                ('date_mise_a_jour', models.DateField(auto_now=True, verbose_name='date mise à jour')),
                ('date_creation', models.DateField(auto_now_add=True, verbose_name='date de création')),
                ('result_prescription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relat_result_prescription', to='app_sandi.prescription', verbose_name='Resultat Prescription')),
                ('resultat_rapide', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rapide_result', to='app_sandi.resultat', verbose_name='Résultat rapide')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='user_clinic',
            field=models.ManyToManyField(blank=True, related_name='compte_clinic', to='app_sandi.clinic'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_lab',
            field=models.ManyToManyField(blank=True, related_name='compte_laboratoire', to='app_sandi.laboratoire'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
